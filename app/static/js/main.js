// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener("DOMContentLoaded", function () {
    const uploadBtn = document.getElementById("upload-btn");
    const sendBtn = document.getElementById("send-btn");
    const userInput = document.getElementById("user-input");
    const chatWindow = document.getElementById("chat-window");
    const modelSelect = document.createElement("select");
    
    // Add model options
    modelSelect.innerHTML = `
        <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
        <option value="gpt-4">GPT-4</option>
        <option value="gpt-4-turbo">GPT-4 Turbo</option>
    `;
    modelSelect.className = "model-select";
    document.querySelector(".input-area").insertBefore(modelSelect, sendBtn);

    // Add styles for model select
    const style = document.createElement("style");
    style.textContent = `
        .model-select {
            padding: 8px;
            border-radius: 8px;
            border: 1px solid #444;
            background-color: #2c2c2c;
            color: #fff;
            margin-right: 10px;
        }
    `;
    document.head.appendChild(style);

    if (uploadBtn) {
        uploadBtn.addEventListener("click", () => {
            const input = document.createElement("input");
            input.type = "file";
            input.accept = "audio/*";
            input.click();

            input.onchange = async () => {
                const file = input.files[0];
                if (!file) return;

                const userMsg = document.createElement("div");
                userMsg.className = "message user";
                userMsg.innerText = `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ${file.name}`;
                chatWindow.appendChild(userMsg);

                const formData = new FormData();
                formData.append("audio_file", file);

                try {
                    const res = await fetch("/upload", { method: "POST", body: formData });
                    const data = await res.json();
                    const botMsg = document.createElement("div");
                    botMsg.className = "message assistant";
                    botMsg.innerText = data.text || "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è";
                    chatWindow.appendChild(botMsg);
                    chatWindow.scrollTop = chatWindow.scrollHeight;
                } catch (err) {
                    alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.");
                }
            };
        });
    }

    async function sendMessage() {
        const text = userInput.value.trim();
        if (!text) return;

        const userMsg = document.createElement("div");
        userMsg.className = "message user";
        userMsg.innerText = text;
        chatWindow.appendChild(userMsg);
        chatWindow.scrollTop = chatWindow.scrollHeight;
        userInput.value = "";

        try {
            const res = await fetch("/gpt", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ 
                    message: text,
                    model: modelSelect.value 
                })
            });
            const data = await res.json();
            const botMsg = document.createElement("div");
            botMsg.className = "message assistant";
            botMsg.innerText = data.reply || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT";
            chatWindow.appendChild(botMsg);
            chatWindow.scrollTop = chatWindow.scrollHeight;
        } catch (err) {
            alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.");
        }
    }

    async function createNewChat() {
        const title = `–ù–æ–≤—ã–π —á–∞—Ç: ${new Date().toLocaleString('ru')}`;
        try {
            const response = await fetch('/api/chats', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞');
            }

            const chat = await response.json();

            await loadChats();

            switchToChat(chat.id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç');
        }
    }
–≤
    async function loadChats() {
        try {
            const response = await fetch('/api/chats');
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤');
            }
            const chats = await response.json();

            const chatList = document.querySelector('.chat-list');

            const chatTitle = chatList.querySelector('p');
            chatList.innerHTML = '';
            chatList.appendChild(chatTitle);

            chats.forEach(chat => {
                const chatItem = document.createElement('div');
                chatItem.className = 'chat-item';
                chatItem.dataset.chatId = chat.id;
                chatItem.innerText = chat.title;
                chatItem.addEventListener('click', () => switchToChat(chat.id));
                chatList.appendChild(chatItem);
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤');
        }
    }

    async function switchToChat(chatId) {
        try {
            const response = await fetch(`/api/chats/${chatId}/messages`);
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞');
            }
            const messages = await response.json();

            chatWindow.innerHTML = '';

            messages.forEach(msg => {
                const msgDiv = document.createElement('div');
                msgDiv.className = `message ${msg.sender === 'user' ? 'user' : 'assistant'}`;
                msgDiv.innerText = msg.content;
                chatWindow.appendChild(msgDiv);
            });

            chatWindow.scrollTop = chatWindow.scrollHeight;

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
            const chatItems = document.querySelectorAll('.chat-item');
            chatItems.forEach(item => item.classList.remove('active'));
            const activeChat = document.querySelector(`.chat-item[data-chat-id='${chatId}']`);
            if (activeChat) {
                activeChat.classList.add('active');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    function showContextMenu(event, chat) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const oldMenu = document.querySelector('.context-menu');
        if (oldMenu) {
            oldMenu.remove();
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        const menu = document.createElement('div');
        menu.className = 'context-menu';
        menu.innerHTML = `
            <div class="menu-item rename">–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å</div>
            <div class="menu-item delete">–£–¥–∞–ª–∏—Ç—å</div>
        `;

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é
        menu.style.left = `${event.pageX}px`;
        menu.style.top = `${event.pageY}px`;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        menu.querySelector('.rename').onclick = () => renameChat(chat);
        menu.querySelector('.delete').onclick = () => deleteChat(chat.id);

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(menu);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', () => {
            menu.remove();
        }, { once: true });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
    async function renameChat(chat) {
        const newTitle = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:', chat.title);
        if (!newTitle || newTitle === chat.title) return;

        try {
            const response = await fetch(`/api/chats/${chat.id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title: newTitle })
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–∞');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            await loadChats();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
    async function deleteChat(chatId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?')) return;

        try {
            const response = await fetch(`/api/chats/${chatId}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞—Ç–∞');
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            await loadChats();
            
            // –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ —á–∞—Ç–∞
            const chatWindow = document.getElementById('chat-window');
            chatWindow.innerHTML = '';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞—Ç');
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    sendBtn.addEventListener("click", sendMessage);
    userInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
            sendMessage();
        }
    });

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —á–∞—Ç" –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    const newChatButtons = document.querySelectorAll('button');
    newChatButtons.forEach(button => {
        if (button.textContent === '–ù–æ–≤—ã–π —á–∞—Ç') {
            button.onclick = createNewChat;
        }
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadChats();
});
