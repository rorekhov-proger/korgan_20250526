from flask import Blueprint, request, jsonify, send_from_directory, render_template, redirect, url_for
from flask_login import login_required, current_user
import os
import logging
from app.services.speech_service import SpeechService
from app.services.gpt_service import GPTService
from app.config.config import Config
from app import db

main = Blueprint('main', __name__)
speech_service = SpeechService()
gpt_service = GPTService()

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in Config.ALLOWED_EXTENSIONS

@main.route("/")
def root():
    if current_user.is_authenticated:
        return redirect(url_for('main.chat'))
    return redirect(url_for('auth.login'))

@main.route("/chat")
@login_required
def chat():
    return render_template('index.html')

@main.route("/upload", methods=["POST"])
@login_required
def upload():
    print("‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞ db:", db)
    print("‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    try:
        connection = db.engine.connect()
        print("‚Üí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        connection.close()
    except Exception as e:
        print(f"‚Üí –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")

    if "audio_file" not in request.files:
        return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400

    audio = request.files["audio_file"]
    chat_id = request.form.get("chat_id")
    model = request.form.get("model", "gpt-3.5-turbo")
    if not chat_id:
        return jsonify({"error": "–ù–µ –≤—ã–±—Ä–∞–Ω —á–∞—Ç"}), 400

    if not audio.filename:
        return jsonify({"error": "–ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"}), 400
        
    if not allowed_file(audio.filename):
        return jsonify({"error": f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(Config.ALLOWED_EXTENSIONS)}"}), 400
    
    if request.content_length > Config.MAX_CONTENT_LENGTH:
        return jsonify({"error": f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_CONTENT_LENGTH // (1024*1024)}MB"}), 413

    filepath = os.path.join(Config.UPLOAD_FOLDER, audio.filename)
    from app.models.chat import Chat
    from app.services.chat_service import ChatService
    try:
        audio.save(filepath)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: ..."
        chat = Chat.query.get(chat_id)
        if not chat:
            return jsonify({"error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        file_message = f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª: {audio.filename}"
        ChatService.save_message(chat_id=chat_id, role="user", message_text=file_message, chat_title=chat.title)
        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
        text = speech_service.transcribe_audio(filepath)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ assistant
        ChatService.save_message(chat_id=chat_id, role="assistant", message_text=text, chat_title=chat.title)
        return jsonify({"text": text})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
    finally:
        if os.path.exists(filepath):
            try:
                os.remove(filepath)
            except:
                pass

@main.route("/gpt", methods=["POST"])
@login_required
def gpt():
    print(">>> /gpt route called, data:", request.get_json())
    try:
        data = request.get_json()
        if not data:
            logging.error("[GPT Route] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞")
            return jsonify({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"}), 400

        user_message = data.get("message", "").strip()
        chat_id = data.get("chat_id")  # –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if not user_message or not chat_id:
            logging.error("[GPT Route] –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id")
            return jsonify({"error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id"}), 400

        model = data.get("model", "gpt-3.5-turbo")
        logging.info(f"[GPT Route] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}, –º–æ–¥–µ–ª—å: {model}, chat_id: {chat_id}")
        logging.info(f"[GPT Route] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OPENAI_API_KEY: {Config.OPENAI_API_KEY[:10]}... (—Å–∫—Ä—ã—Ç)")
        logging.info(f"[GPT Route] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è OPENAI_API_BASE_URL: {Config.OPENAI_API_BASE_URL}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GPT
        reply = gpt_service.get_completion(user_message, model=model)
        logging.info(f"[GPT Route] –û—Ç–≤–µ—Ç –æ—Ç GPT: {reply}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            from app.models.chat import Chat
            from app.services.chat_service import ChatService
            chat = Chat.query.get(chat_id)
            if not chat:
                logging.error(f"[GPT Route] –ß–∞—Ç —Å ID {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return jsonify({"error": "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

            saved_message = ChatService.save_message(chat_id=chat_id, role="user", message_text=user_message, chat_title=chat.title)
            if not saved_message:
                logging.error("[GPT Route] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç GPT –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            saved_reply = ChatService.save_message(chat_id=chat_id, role="assistant", message_text=reply, chat_title=chat.title)
            if not saved_reply:
                logging.error("[GPT Route] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ GPT –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logging.error(f"[GPT Route] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

        return jsonify({"reply": reply})

    except Exception as e:
        logging.error(f"[GPT Route] –û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        return jsonify({"error": str(e)}), 500